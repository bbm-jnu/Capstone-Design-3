import pandas as pd
dyn = pd.read_csv(#데이터csv)
dyn

from sklearn.preprosessing import StandardScaler
from sklearn.model_selection import train_test_split
X = dyn[#X축 분류명]
Y = dyn['survival']
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.5, random_state = 0)
scaler = StandardScaler().fit(X_train)
X_test = scaler.transform(X_test)
X_train = scaler.transform(X_train)
from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors = 5, metric = 'euclidean')
knn.fit(X_train, Y_train)
pred = knn.predict(X_test)
print(pred)

print("{:.5f}".format(knn.score(X_train, Y_train)))
print("{:.5f}".format(knn.score(X_test, Y_test)))

from sklearn.metrics import classification_report
print(classification_report(Y_test, pred))

import numpy as np
X = dyn[dyn.survival==0][[#X축 분류명]]
Y = np.log1p(dyn[dyn.survival==0]['preference'])
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.5, random_state=0)
scaler = StandardScaler().fit(X_train)
X_test = scaler.transform(X_test)
X_train = scaler.transform(X_train)
from sklearn.neighbors import KNeighborsRegressor
knnreg = KNeighborsRegressor(n_neighbors=5, p=2)
knnreg.fit(X_train, Y_train)
pred = knnreg.predict(X_test)
print(pred)

print("{:.5f}".format(knnreg.score(X_train, Y_train)))
print("{:.5f}".format(knnreg.score(X_test, Y_test)))

from sklearn.metrics import mean_squared_error
from math import sqrt
rmse = sqrt(mean_squared_error(Y_test, pred))
print("{.5f}".format(rmse))
